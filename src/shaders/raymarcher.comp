#version 430 core

//Output texture
layout(binding = 0, rgba32f) uniform writeonly image2D framebuffer;

//Object inputs
//layout(std430, binding = 1) buffer ObjectsBuffer { Object objects[]; };

//Skybox
layout(binding = 1) uniform samplerCube skybox;

//Camera uniforms

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;

struct material
{
  vec4 color;
  float reflectivity;
  float refractivity;
  float transparency;
};

#define MAX_RAY_STEPS 100
#define MINIMUM_DISTANCE 0.0001
#define ITERATIONS 200
#define SCALE 2.0
#define BAILOUT 2.0
#define POWER 8.0

#define FLOAT_COMPARISON_PRECISION 0.0001

//Support structs
struct rayObj
{
  vec3 dir;
  vec3 ori;
};

struct hitRecord
{
  float t; //Distance along ray
  int objType; //Box 1, Sphere 2
  material mat;
  vec3 normal;
};

bool fuzzy_equals(float a, float b)
{
  if (abs(a - b) < FLOAT_COMPARISON_PRECISION) return true;
  return false;
}

bool fuzzy_equals(vec3 a, vec3 b)
{
  if (fuzzy_equals(a.x, b.x) && fuzzy_equals(a.y, b.y) && fuzzy_equals(a.z, b.z)) return true;
  return false;
}

void swap(float a, float b)
{
  float temp = a;
  a = b;
  b = temp;
}

vec3 getRayPos(rayObj ray, float t)
{
  return ray.ori + ray.dir * t;
}

float mandelbulbDistanceEst(vec3 pos) {
	vec3 z = pos;
	float dr = 1.0;
	float r = 0.0;
	for (int i = 0; i < ITERATIONS ; i++) {
		r = length(z);
		if (r>BAILOUT) break;
		
		// convert to polar coordinates
		float theta = acos(z.z/r);
		float phi = atan(z.y,z.x);
		dr =  pow(r, POWER - 1.0)*POWER*dr + 1.0;
		
		// scale and rotate the point
		float zr = pow(r, POWER);
		theta = theta*POWER;
		phi = phi*POWER;
		
		// convert back to cartesian coordinates
		z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
		z+=pos;
	}
	return 0.5*log(r)*r/dr;
}

float sierpinskiDistanceEst(vec3 z)
{
    float r;
    int n = 0;
    while (n < ITERATIONS) {
       if(z.x+z.y<0) z.xy = -z.yx; // fold 1
       if(z.x+z.z<0) z.xz = -z.zx; // fold 2
       if(z.y+z.z<0) z.zy = -z.yz; // fold 3	
       z = z*SCALE - vec3(1,1,1)*(SCALE-1.0);
       n++;
    }
    return (length(z) ) * pow(SCALE, -float(n));
}

float sphereDistanceEst(vec3 p)
{
  //return max(0.0, length(point)-1.0);
  p.xy = vec2(mod(p.x, 1.0), mod(p.y, 1.0)) - 0.5;
  return length(p)-0.3;
}

float trace(rayObj ray) {
  int steps;
	for (steps = 0; steps < MAX_RAY_STEPS; steps++) {
		float distance = mandelbulbDistanceEst(ray.ori);
		ray.ori += distance * ray.dir;
		if (distance < MINIMUM_DISTANCE) 
      break;
	}
	return 1.0 - float(steps)/float(MAX_RAY_STEPS);
}

layout (local_size_x = 16, local_size_y = 8) in;
void main(void) {
  ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(framebuffer);
  if (pix.x >= size.x || pix.y >= size.y) {
    return;
  }
  vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
  vec3 dir = normalize(mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x));
  rayObj ray = rayObj(dir, eye);
  vec4 color = vec4(vec3(trace(ray)), 1.0);
  imageStore(framebuffer, pix, color);
}
