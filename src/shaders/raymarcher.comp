#version 430 core

//Output texture
layout(binding = 0, rgba32f) uniform writeonly image2D framebuffer;

//Object inputs
//layout(std430, binding = 1) buffer ObjectsBuffer { Object objects[]; };

//Skybox
layout(binding = 1) uniform samplerCube skybox;

//Camera uniforms

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;

struct material
{
  vec4 color;
  float reflectivity;
  float refractivity;
  float transparency;
};

#define MAX_RAY_STEPS 10
#define MINIMUM_DISTANCE 0.001

#define FLOAT_COMPARISON_PRECISION 0.0001

//Support structs
struct rayObj
{
  vec3 dir;
  vec3 ori;
};

struct hitRecord
{
  float t; //Distance along ray
  int objType; //Box 1, Sphere 2
  material mat;
  vec3 normal;
};

bool fuzzy_equals(float a, float b)
{
  if (abs(a - b) < FLOAT_COMPARISON_PRECISION) return true;
  return false;
}

bool fuzzy_equals(vec3 a, vec3 b)
{
  if (fuzzy_equals(a.x, b.x) && fuzzy_equals(a.y, b.y) && fuzzy_equals(a.z, b.z)) return true;
  return false;
}

void swap(float a, float b)
{
  float temp = a;
  a = b;
  b = temp;
}

vec3 getRayPos(rayObj ray, float t)
{
  return ray.ori + ray.dir * t;
}

float sphereDistanceEst(vec3 point)
{
  return max(0.0, length(point)-1.0);
}

float trace(rayObj ray) {
  int steps;
	for (steps = 0; steps < MAX_RAY_STEPS; steps++) {
		float distance = sphereDistanceEst(ray.ori);
		ray.ori += distance * ray.dir;
		if (distance < MINIMUM_DISTANCE) 
      break;
	}
	return 1.0 - float(steps)/float(MAX_RAY_STEPS);
}

layout (local_size_x = 16, local_size_y = 8) in;
void main(void) {
  ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(framebuffer);
  if (pix.x >= size.x || pix.y >= size.y) {
    return;
  }
  vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
  vec3 dir = normalize(mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x));
  rayObj ray = rayObj(dir, eye);
  vec4 color = vec4(vec3(trace(ray)), 1.0);
  imageStore(framebuffer, pix, color);
}
